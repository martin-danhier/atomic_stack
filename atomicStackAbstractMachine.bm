machine atomicStackAbstractMachine
sees atomicStackAbstractContext
variables
    barTo              // Where is the element going to
    barFrom            // Where is the element coming from
    handlingElement    // Is an element being handled ?
    simpleStack        // Simplified stack : only contains the number of element in each floor

invariants
    // Types
    @barTo_type barTo ∈ 0 ‥ nbFloors
    @barFrom_type barFrom ∈ 0 ‥ nbFloors
    @handlingElement_type handlingElement ∈ BOOL
    @simpleStack_type simpleStack ∈ 1‥nbFloors → 0‥nbElementsPerFloor
    // Last floor is reserved
    @last_floor_reserved ¬(barTo = nbFloors ∧ barFrom = 0)
    // It is impossible to place an element where there is already an element
    @place_elements_in_empty_spots barTo = 0 ∨ simpleStack(barTo) < nbElementsPerFloor
events

    // Init the machine with default values
    event INITIALISATION
    then
        @barTo_init barTo ≔ 0
        @barFrom_init barFrom ≔ 0
        @handlingElement_init handlingElement ≔ FALSE
        @simpleStack_init simpleStack ≔ 1‥nbFloors × {0}
    end

    // Create an element
    event Bar_new
    where
        @not_already_a_working_element1 barTo = 0
        @not_already_a_working_element2 barFrom = 0
        @not_already_a_working_element3 handlingElement = FALSE
        @last_floor_must_be_empty simpleStack(nbFloors) = 0
    then
        @set_handlingElement handlingElement ≔ TRUE
    end

    // Define a destination for the working element
    event Bar_in
    any destinationFloor
    where
        @destinationFloor_type destinationFloor ∈ 1‥nbFloors
        @last_floor_reserved destinationFloor = 6 ⇒ barFrom ≠ 0
        @has_a_element_handled handlingElement = TRUE
        @room_left_on_that_floor simpleStack(destinationFloor) < nbElementsPerFloor
        @not_already_set barTo = 0
    then
        @set_barTo barTo ≔ destinationFloor
    end

    // Apply the insertion of a bar
    event Bar_insert
    where
        @something_to_insert barTo ≠ 0
        @something_to_insert2 handlingElement = TRUE     
    then
        @apply simpleStack(barTo) ≔ simpleStack(barTo) + 1
        @clear_barTo barTo ≔ 0
        @clear_barFrom barFrom ≔ 0
        @clear_handlingElement handlingElement ≔ FALSE
    end

    // Withdraw a bar from the stack
    event Bar_withdraw
    any fromFloor
    where
        @fromFloor_type fromFloor ∈ 1‥nbFloors
        @non_empty_floor simpleStack(fromFloor) > 0
        @not_handlingElement handlingElement = FALSE
    then
        @set_barFrom barFrom ≔ fromFloor
        @set_handlingElement handlingElement ≔ TRUE
        @clear simpleStack(fromFloor) ≔ simpleStack(fromFloor) - 1
    end

    // Remove the bar and send it away
    event Bar_out
    where
        @not_already_going_somewhere barTo = 0
        @has_something_to_throw handlingElement = TRUE
    then
        @clear_barFrom barFrom ≔ 0
        @clear_handlingElement handlingElement ≔ FALSE
    end
end